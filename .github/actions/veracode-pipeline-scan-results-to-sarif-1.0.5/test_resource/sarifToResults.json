{"findings":[{"title":"child_process.spawn","cwe_id":"78","severity":5,"display_text":"<span>This call to child_process.spawn() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. </span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/Command_Injection\">OWASP</a> <a href=\"https://webappsec.pbworks.com/OS-Commanding\">WASC</a></span>","files":{"source_file":{"file":"lib/optimizer/Optimizer.js","line":24,"function_name":"!func","qualified_function_name":"!main.spawnProcess.!func"}},"flaw_match":{"sarif_fingerprint":"1132923293"}},{"title":"http.ServerResponse.write","cwe_id":"80","severity":3,"display_text":"<span>This call to http.ServerResponse.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. </span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/XSS\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Cross-Site-Scripting\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"scripts/update-command.js","line":20,"function_name":"!main","qualified_function_name":"!main"}},"flaw_match":{"sarif_fingerprint":"691645020"}},{"title":"http.ServerResponse.write","cwe_id":"80","severity":3,"display_text":"<span>This call to http.ServerResponse.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. </span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/XSS\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Cross-Site-Scripting\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"scripts/deploy-command.js","line":41,"function_name":"!main","qualified_function_name":"!main"}},"flaw_match":{"sarif_fingerprint":"4167229899"}},{"title":"console.log","cwe_id":"117","severity":3,"display_text":"<span>This call to console.log() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. </span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/Log_injection\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Improper-Output-Handling\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"lib/ImageResizer.js","line":42,"function_name":"!func","qualified_function_name":"!main.exec.!func.!lambda6.!func"}},"flaw_match":{"sarif_fingerprint":"981161722"}},{"title":"console.log","cwe_id":"117","severity":3,"display_text":"<span>This call to console.log() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. </span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/Log_injection\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Improper-Output-Handling\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"lib/ImageReducer.js","line":65,"function_name":"!func","qualified_function_name":"!main.createReduceProcessList.!func"}},"flaw_match":{"sarif_fingerprint":"967779305"}},{"title":"console.log","cwe_id":"117","severity":3,"display_text":"<span>This call to console.log() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. </span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/Log_injection\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Improper-Output-Handling\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"lib/ImageProcessor.js","line":31,"function_name":"!func","qualified_function_name":"!main.run.!func"}},"flaw_match":{"sarif_fingerprint":"1754456356"}},{"title":"console.log","cwe_id":"117","severity":3,"display_text":"<span>This call to console.log() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. </span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/Log_injection\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Improper-Output-Handling\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"lib/ImageData.js","line":190,"function_name":"!func","qualified_function_name":"!main.combineWithDirectory.!func"}},"flaw_match":{"sarif_fingerprint":"3739485724"}},{"title":"console.log","cwe_id":"117","severity":3,"display_text":"<span>This call to console.log() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. </span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/Log_injection\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Improper-Output-Handling\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"lib/ImageArchiver.js","line":29,"function_name":"!func","qualified_function_name":"!main.exec.!func.!lambda1.!func"}},"flaw_match":{"sarif_fingerprint":"2461579846"}},{"title":"console.log","cwe_id":"117","severity":3,"display_text":"<span>This call to console.log() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. </span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/Log_injection\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Improper-Output-Handling\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"lib/EventParser.js","line":9,"function_name":"!func","qualified_function_name":"!main.parseEvent.!func"}},"flaw_match":{"sarif_fingerprint":"1759249738"}},{"title":"console.log","cwe_id":"117","severity":3,"display_text":"<span>This call to console.log() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. </span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/Log_injection\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Improper-Output-Handling\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"index.js","line":24,"function_name":"!func","qualified_function_name":"!main.!lambda1.!func"}},"flaw_match":{"sarif_fingerprint":"634911230"}},{"title":"console.log","cwe_id":"117","severity":3,"display_text":"<span>This call to console.log() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. </span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://www.owasp.org/index.php/Log_injection\">OWASP</a> <a href=\"https://webappsec.pbworks.com/Improper-Output-Handling\">WASC</a> <a href=\"https://help.veracode.com/reader/4EKhlLSMHm5jC8P8j3XccQ/IiF_rOE79ANbwnZwreSPGA\">Supported Cleansers</a></span>","files":{"source_file":{"file":"index.js","line":38,"function_name":"!func","qualified_function_name":"!main.process.!func"}},"flaw_match":{"sarif_fingerprint":"1666937942"}},{"title":"http.ServerResponse.write","cwe_id":"201","severity":2,"display_text":"<span> The application calls the http.ServerResponse.write() function, which will result in data being transferred out of the application (via the network or another medium).  In this case, the message being sent contains local file data.  </span> <span>Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/201.html\">CWE</a> <a href=\"https://webappsec.pbworks.com/Information-Leakage\">WASC</a></span>","files":{"source_file":{"file":"scripts/update-command.js","line":20,"function_name":"!main","qualified_function_name":"!main"}},"flaw_match":{"sarif_fingerprint":"211846691"}},{"title":"http.ServerResponse.write","cwe_id":"201","severity":2,"display_text":"<span> The application calls the http.ServerResponse.write() function, which will result in data being transferred out of the application (via the network or another medium).  In this case, the message being sent contains local file data.  </span> <span>Ensure that the transfer of the sensitive data is intended and that it does not violate application security policy.  This flaw is categorized as low severity because it only impacts confidentiality, not integrity or availability.  However, in the context of a mobile application, the significance of an information leak may be much greater, especially if misaligned with user expectations or data privacy policies.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/201.html\">CWE</a> <a href=\"https://webappsec.pbworks.com/Information-Leakage\">WASC</a></span>","files":{"source_file":{"file":"scripts/deploy-command.js","line":41,"function_name":"!main","qualified_function_name":"!main"}},"flaw_match":{"sarif_fingerprint":"211846691"}}]}